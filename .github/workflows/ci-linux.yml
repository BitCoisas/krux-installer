name: Linux CI

on:
  push:
    branches:
      - main
      - linux*
    pull_request:
      branches:
        - main

jobs:
  ci:
    name: Build and test

    strategy:
      max-parallel: 1
      matrix:
        include:
          - build: AppImage
            test: main
          
          - build: AppImage
            test: select-device
          
          - build: AppImage
            test: select-version/init 
          
          - build: AppImage
            test: select-version/v22.03.0/release 
            file: v22.03.0/krux-v22.03.0.zip
          
          - build: AppImage
            test: select-version/v22.03.0/sha256 
            file: v22.03.0/krux-v22.03.0.zip.sha256.txt

          - build: AppImage
            test: select-version/v22.03.0/sig
            file: v22.03.0/krux-v22.03.0.zip.sig

          - build: AppImage
            test: select-version/v22.03.0/pem
            file: main/selfcustody.pem
          
          - build: AppImage
            test: select-version/v22.03.0/verify
        
          - build: AppImage
            test: select-version/v22.08.0/release 
            file: v22.08.0/krux-v22.08.0.zip
          
          - build: AppImage
            test: select-version/v22.08.0/sha256 
            file: v22.08.0/krux-v22.08.0.zip.sha256.txt

          - build: AppImage
            test: select-version/v22.08.0/sig
            file: v22.08.0/krux-v22.08.0.zip.sig

          - build: AppImage
            test: select-version/v22.08.0/pem
            file: main/selfcustody.pem
          
          - build: AppImage
            test: select-version/v22.08.0/verify 

          - build: AppImage
            test: select-version/v22.08.1/release 
            file: v22.08.1/krux-v22.08.1.zip
          
          - build: AppImage
            test: select-version/v22.08.1/sha256 
            file: v22.08.1/krux-v22.08.1.zip.sha256.txt

          - build: AppImage
            test: select-version/v22.08.1/sig
            file: v22.08.1/krux-v22.08.1.zip.sig

          - build: AppImage
            test: select-version/v22.08.1/pem
            file: main/selfcustody.pem
          
          - build: AppImage
            test: select-version/v22.08.1/verify

          - build: AppImage
            test: select-version/v22.08.2/release 
            file: v22.08.2/krux-v22.08.2.zip
          
          - build: AppImage
            test: select-version/v22.08.2/sha256 
            file: v22.08.2/krux-v22.08.2.zip.sha256.txt

          - build: AppImage
            test: select-version/v22.08.2/sig
            file: v22.08.2/krux-v22.08.2.zip.sig

          - build: AppImage
            test: select-version/v22.08.2/pem
            file: main/selfcustody.pem
          
          - build: AppImage
            test: select-version/v22.08.2/verify

          - build: AppImage
            test: select-version/krux_binaries/m5stickv

          - build: AppImage
            test: select-version/krux_binaries/amigo_ips
          
          - build: AppImage
            test: select-version/krux_binaries/amigo_tft
          
          - build: AppImage
            test: select-version/krux_binaries/ktool

          - build: AppImage
            test: flash/init

    runs-on: ubuntu-latest
    steps:
 
      - name: Checkout Git repository
        uses: actions/checkout@v2

      # See 'Testing on Headless CI Systems'
      # https://github.com/electron/electron/blob/main/docs/tutorial/testing-on-headless-ci.md
      - name: Setup Linux - Xvfb for headless tests
        run: sudo apt-get install -y xvfb

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.14.0'

      - name: Restore cached dependencies
        id: cache-restore-deps
        uses: actions/cache/restore@v3
        with:
          path: ${{ github.workspace }}/node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies 
        if: ${{ steps.cache-restore-deps.outputs.cache-hit != 'true' }}
        run: yarn install
 
      - name: Install platform dependencies 
        if: ${{ steps.cache-restore-deps.outputs.cache-hit != 'true' }}
        run: yarn run platform-install

      - name: Install app dependencies
        if: ${{ steps.cache-restore-deps.outputs.cache-hit != 'true' }}
        run: yarn run install-app-deps

      - name: Save cache dependencies
        if: ${{ steps.cache-restore-deps.outputs.cache-hit != 'true' }}
        id: cache-save-deps
        uses: actions/cache/save@v3
        with:
          path: ${{ github.workspace }}/node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}

      - name: Get version
        id: get-version
        run: echo "version=`node -e \"console.log(require('./package.json').version)\"`" >> $GITHUB_OUTPUT

      - name: Setup context
        id: context
        run: echo "name=KruxInstaller-v${{ steps.get-version.outputs.version }}" >> $GITHUB_OUTPUT

      - name: Restore cache build 
        id: cache-restore-build
        uses: actions/cache/restore@v3 
        with:
          path: |
            dist_electron/${{ steps.context.outputs.name }}.${{ matrix.build }} 
            dist_electron/${{ steps.context.outputs.name }}.${{ matrix.build }}.sha256.txt
            dist_electron/linux-unpacked/**
          key: ${{ runner.os }}-build-${{ hashFiles('src/**', 'public/**', 'vue.config.js') }}
      
      - name: Lint
        if: ${{ steps.cache-restore-build.outputs.cache-hit != 'true' }}
        run: yarn run lint
 
      - name: Build electron
        if: ${{ steps.cache-restore-build.outputs.cache-hit != 'true' }}
        env:
          GH_TOKEN: ${{ secrets.github_token }}
        run: yarn run build AppImage
      
      - name: Hash builded electron app 
        if: ${{ steps.cache-restore-build.outputs.cache-hit != 'true' }}
        run: echo "${{ steps.context.outputs.name }} ${{ hashFiles(format('**/dist_electron/*.AppImage')) }}" >> dist_electron/${{ steps.context.outputs.name }}.AppImage.sha256.txt
 
      - name: Save cache build 
        if: ${{ steps.cache-restore-build.outputs.cache-hit != 'true' }}
        uses: actions/cache/save@v3  
        with:
          path: |
            dist_electron/${{ steps.context.outputs.name }}.${{ matrix.build }} 
            dist_electron/${{ steps.context.outputs.name }}.${{ matrix.build }}.sha256.txt
            dist_electron/linux-unpacked/**
          key: ${{ runner.os }}-build-${{ hashFiles('src/**', 'public/**', 'vue.config.js') }}
    
      - name: Restore cache config
        id: cache-restore-config
        uses: actions/cache/restore@v3
        with:
          path: /home/runner/.config/krux-installer 
          key: ${{ runner.os }}-config

      - name: Create config
        if: ${{ steps.cache-restore-config.outputs.cache-hit != 'true' }}
        run: |
          yarn run test init
          ls /home/runner/.config/krux-installer
          cat /home/runner/.config/krux-installer/config.json

      - name: Save cache config 
        if: ${{ steps.cache-restore-config.outputs.cache-hit != 'true' }}
        id: cache-save-config
        uses: actions/cache/save@v3
        with: 
          path: /home/runner/.config/krux-installer
          key: ${{ runner.os }}-config

      - name: Restore cache resources
        if: ${{ startsWith(matrix.test, 'select-version/v') || startsWith(matrix.test, 'select-version/krux_binaries') }}
        id: cache-restore-resources
        uses: actions/cache/restore@v3
        with:
          path: |
            /home/runner/krux-installer/main
            /home/runner/krux-installer/v22.03.0
            /home/runner/krux-installer/v22.08.0
            /home/runner/krux-installer/v22.08.1
            /home/runner/krux-installer/v22.08.2
            /home/runner/krux-installer/odudex
          key: ${{ runner.os }}-resources

      - name: E2E Test with resources 
        if: ${{ steps.cache-restore-resources.outputs.cache-hit == 'true' }}
        uses: Wandalen/wretry.action@master
        with:
          attempt_limit: 3
          attempt_delay: 3000
          command: yarn run test ${{ matrix.test }} --filter '0[0-9][0-9].download*.spec.ts'

      - name: E2E Test without resources 
        if: ${{ steps.cache-restore-resources.outputs.cache-hit != 'true' }}
        uses: Wandalen/wretry.action@master
        with:
          attempt_limit: 3
          attempt_delay: 3000
          command: yarn run test ${{ matrix.test }}

      - name: Save cache resources  
        if: ${{ startsWith(matrix.test, 'select-version/v') || startsWith(matrix.test, 'select-version/krux_binaries') }}
        uses: actions/cache/save@v3 
        with:  
          path: |  
            /home/runner/krux-installer/main
            /home/runner/krux-installer/v22.03.0
            /home/runner/krux-installer/v22.08.0
            /home/runner/krux-installer/v22.08.1
            /home/runner/krux-installer/v22.08.2
            /home/runner/krux-installer/odudex
          key: ${{ runner.os }}-resources
      
            #      - name: Upload AppImage artifact
            #uses: actions/upload-artifact@v3
            #if: ${{ steps.e2e-test.conclusion != 'failure' && matrix.test == 'select-version/v22.03.0' && startsWith(github.ref, 'refs/heads/main')}}
            #with:
            #name: ${{ steps.set-release.outputs.name }}
            #path: |
            #dist_electron/${{ steps.set-release.outputs.name }}.AppImage
            #dist_electron/${{ steps.set-release.outputs.name }}.AppImage.sha256.txt
