name: Build electron application as dmg package on MacOS

on:
  workflow_call:
    secrets:
      token:
        required: true

jobs:

  build-macos-12:
    runs-on: macos-latest
  
    steps:

      - name: Checkout Git repository
        uses: actions/checkout@v3

      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: "20.10.0"

      - name: Variables helpers
        id: setup
        run: |
          KRUX_VERSION=`node -e "console.log(require('./package.json').version)"`
          echo "app-version=$KRUX_VERSION" >> $GITHUB_OUTPUT
          KRUX_NAME=krux-installer_$KRUX_VERSION
          echo "app-name=$KRUX_NAME" >> $GITHUB_OUTPUT
          echo "::group::Variables"
          echo "app-version=$KRUX_VERSION"
          echo "app-name=$KRUX_NAME"
          echo "::endgroup::"

      - name: Install node-gyp deps
        run: |
          pipx install setuptools

      - name: Install dependencies 
        run: yarn install

      #- name: Install chromedriver
      #  env:
      #    CHROMEDRIVER_VERSION: '114.0.5735.90'
      #    ZIPFILE: 'chromedriver_mac64.zip'
      #    DESTDIR: './node_modules/chromedriver/bin'
      #    ZIPURI: 'https://chromedriver.storage.googleapis.com'
      #  run: |
      #    curl -o ${TMPDIR}${ZIPFILE} $ZIPURI/$CHROMEDRIVER_VERSION/$ZIPFILE
      #    unzip -o ${TMPDIR}${ZIPFILE} -d $DESTDIR

      #- name: List chromedriver binaries
      #  run: ls -la node_modules/chromedriver/bin

      #- name: Pre-test chromedriver
      #  run: ./node_modules/chromedriver/bin/chromedriver --version
      
      - name: Build electron app
        env:
          GH_TOKEN: ${{ secrets.token }}
        run: yarn run build --macos dmg

      - name: Hash electron app
        uses: qlrd/sha256sum-action@v2
        with:
          working-directory: ./release/${{ steps.setup.outputs.app-version }}
          file: ${{ steps.setup.outputs.app-name }}.dmg
          ext: sha256.txt

      #- name: List release files
      #  run: |
      #    echo "::group::Release files"
      #    ls -la release/${{ steps.setup.outputs.app-version }}
      #    echo "::endgroup::"
      #    echo "::group::Unpacked files"
      #    ls -la release/${{ steps.setup.outputs.app-version }}/mac
      #    echo "::endgroup::"
      #    echo "::group::Unpacked .app directory"
      #    ls -la release/${{ steps.setup.outputs.app-version }}/mac/krux-installer.app 
      #    echo "::endgroup::"
      #    echo "::group::Unpacked .app/Contents directory"
      #    ls -la release/${{ steps.setup.outputs.app-version }}/mac/krux-installer.app/Contents  
      #    echo "::endgroup::"
      #    echo "::group::Unpacked .app/Contents/Frameworks directory"
      #    ls -la release/${{ steps.setup.outputs.app-version }}/mac/krux-installer.app/Contents/Frameworks  
      #    echo "::endgroup::"
      #    echo "::group::Unpacked .app/Contents/MacOS directory"
      #    ls -la release/${{ steps.setup.outputs.app-version }}/mac/krux-installer.app/Contents/MacOS 
      #    echo "::endgroup::"
      #    echo "::group::Unpacked .app/Contents/Resources directory"
      #    ls -la release/${{ steps.setup.outputs.app-version }}/mac/krux-installer.app/Contents/Resources  
      #    echo "::endgroup::"

      #- name: E2E test electron app
      #  env:
      #    DEBUG: 'krux:*'
      #  run: ./node_modules/.bin/wdio run wdio.conf.mts

      - name: Upload artifacts
        uses: actions/upload-artifact@v3 
        #if: ${{ github.ref_name == 'main' }}
        with:
          name: ${{ runner.os }}-${{ steps.setup.outputs.app-name }}-dmg
          retention-days: 5
          path: |
            release/${{ steps.setup.outputs.app-version }}/${{ steps.setup.outputs.app-name }}.dmg
            release/${{ steps.setup.outputs.app-version }}/${{ steps.setup.outputs.app-name }}.dmg.sha256.txt
