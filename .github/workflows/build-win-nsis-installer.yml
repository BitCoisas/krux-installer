name: Build NSIS installer for windows

on:
  push:
    branches:
      - main
      - win32-builtin-openssl
    pull_request:
      branches:
        - main

jobs:
  build:
    name: Build NSIS installer for windows
          
    runs-on: windows-latest
    
    steps:
      - name: Checkout Git repository
        uses: actions/checkout@v2

      - name: Setup output variables helpers
        id: setup
        shell: pwsh
        run: |
          $loc = Get-Location
          $version = "v22.08.2"
          $zipname = "krux-$version.zip"
          $signame = "krux-$version.zip.sig"
          $pemname = "selfcustody.pem"
          $release_url = "https://github.com/selfcustody/krux/releases/download"
          $raw_url = "https://raw.githubusercontent.com/selfcustody/krux/main/$pemname"
          mkdir $loc\vendor
          echo "zip=$loc\$zipname" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append  
          echo "sig=$loc\$signame" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append 
          echo "pem=$loc\$pemname" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append 
          echo "release_zip=$release_url/$version/$zipname" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append 
          echo "release_sig=$release_url/$version/$signame" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          echo "release_pem=$raw_url/$pemname" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          echo "prefix=$loc\vendor\OpenSSL" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append  
          echo "openssldir=$loc\vendor\OpenSSL\CommonFiles" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          
      - name: Configure, build, test and install openssl
        uses: qlrd/compile-openssl-windows-action@v0.0.1
        with:
          version: openssl-3.0.7
          prefix: ${{ steps.setup.outputs.prefix }}
          openssldir: ${{ steps.setup.outputs.openssldir }}
          build-type: 'minimal'

      - name: Pre-test builtin openssl
        shell: cmd
        run: |
          curl.exe -L -O ${{ steps.setup.outputs.zip }} ${{ steps.setup.outputs.release_zip }}
          curl.exe -L -O ${{ steps.setup.outputs.sig }} ${{ steps.setup.outputs.release_sig }}
          curl.exe -L -O ${{ steps.setup.outputs.pem }} ${{ steps.setup.outputs.release_pem }}
          ${{ steps.setup.outputs.prefix }}\bin\openssl.exe sha256 <${{ steps.setup.outputs.zip }} -binary | ${{ steps.setup.outputs.prefix }}\bin\openssl.exe pkeyutl -verify -pubin -inkey ${{ steps.setup.outputs.pem }} -sigfile ${{ steps.setup.outputs.sig }}

      - name: Setup node.js
        uses: actions/setup-node@v1
        with:
          node-version: '16.18.0'

      - name: Install Node.js dependencies (Windows)
        run: |
          yarn install
          yarn run platform-install

      - name: Make icons
        run: |
          yarn run icon
          rm ./build/*.svg
          rm ./build/*.png

      - name: Get version from package.json
        uses: polyseam/get-version-from-package-json@1.0.0
        id: version
        with:
          path-to-package-json: ./package.json

      - name: Build KruxInstaller
        env:
          GH_TOKEN: ${{ secrets.github_token }}
        run: |
          yarn run build nsis
      
      - name: Hash executable
        uses: qlrd/sha256sum-action@v1.0.0
        with:
          path-to-file: .\dist_electron\KruxInstaller Setup ${{ steps.version.outputs.version }}.exe

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: KruxInstaller Setup v${{ steps.version.outputs.version }}.exe
          path: |
            .\dist_electron\KruxInstaller Setup ${{ steps.version.outputs.version }}.exe
            .\dist_electron\KruxInstaller Setup ${{ steps.version.outputs.version }}.exe.sha256sum.txt
