name: Test electron app on Windows

on:
  workflow_call:

    inputs:
      build:
        description: 'The build type (AppImage, deb, snap)'
        type: string
        required: true
     
      test:
        description: 'The main test to be done (main, select-device, select-version, flash)'
        type: string
        required: true

      sub-test:
        description: 'The sub-test to be done (select-version: [init, release, sha256, sig, pem])'
        type: string
        required: false

      krux-version:
        description: 'Flag to indicate which version will be tested'
        type: string
        default: '22.08.2'

      digest-ext:
        description: 'The extension for sha256 digest file'
        type: string
        default: 'sha256.txt'

jobs:

  test-win:
    runs-on: windows-latest
  
    steps:

      - name: Checkout Git repository
        uses: actions/checkout@v3
      
      - name: Setup cached node.js with dependencies
        uses: qlrd/setup-cached-node@main
        with:
          node-version: '18.15.0'
          cache-path: ${{ github.workspace }}/node_modules
          cache-key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock', 'node_modules/png-to-ico/bin') }}

      - name: Setup variables
        id: setup
        shell: pwsh
        run: |
          $app_version = node -e "console.log(require('./package.json').version)"
          $app_name="KruxInstaller Setup $app_version"
          $res=[environment]::GetFolderPath("MyDocuments")
          echo "app-version=$app_version" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          echo "app-name=$app_name" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          echo "config-path=$Env:APPDATA\krux-installer" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          echo "release-path=$res\krux-installer\v${{ inputs.krux-version }}" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          echo "main-path=$res\krux-installer\main" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Restore cached config
        id: restore-cache-config
        uses: actions/cache/restore@v3
        with: 
          path: ${{ steps.setup.outputs.config-path }} 
          key: ${{ runner.os }}-config-${{ steps.setup.outputs.app-version }}

      - name: Restore cache build
        id: restore-cache-build
        uses: actions/cache/restore@v3 
        with:
          path: |
            dist_electron/${{ steps.setup.outputs.app-name }}.exe 
            dist_electron/${{ steps.setup.outputs.app-name }}.exe.${{ inputs.digest-ext }}
            dist_electron/win-unpacked
          key: ${{ runner.os }}-build-${{ hashFiles('src/**', 'public/**', 'vue.config.js') }}

      - name: Restore cache release resource 
        if: >-
          ${{
            (
              inputs.test == 'select-version' ||
              inputs.test == 'flash'
            ) &&
            inputs.sub-test != 'init'
          }}
        id: restore-cache-release
        uses: actions/cache/restore@v3
        with:
          path: ${{ steps.setup.outputs.release-path }}\krux-v${{ inputs.krux-version }}.zip
          key: ${{ runner.os }}-release-v${{ inputs.krux-version }}
         
      - name: Restore cache sha256 resource  
        if: >-
          ${{
            (
              inputs.test == 'select-version' ||
              inputs.test == 'flash'
            ) &&
            inputs.sub-test != 'init'
          }}
        id: restore-cache-sha256
        uses: actions/cache/restore@v3
        with:
          path: ${{ steps.setup.outputs.release-path }}\krux-v${{ inputs.krux-version }}.zip.${{ inputs.digest-ext }}
          key: ${{ runner.os }}-sha256-v${{ inputs.krux-version }}

      - name: Restore cache signature resource  
        if: >-
          ${{
            (
              inputs.test == 'select-version' ||
              inputs.test == 'flash' 
            ) &&
            inputs.sub-test != 'init'
          }}
        id: restore-cache-sig
        uses: actions/cache/restore@v3
        with:
          path: ${{ steps.setup.outputs.release-path }}\krux-v${{ inputs.krux-version }}.zip.sig
          key: ${{ runner.os }}-sig-v${{ inputs.krux-version }}

      - name: Restore cache public key certificate resource 
        if: >-
          ${{
            (
              inputs.test == 'select-version' || 
              inputs.test == 'flash'
            ) &&
            inputs.sub-test != 'init'
          }}
        id: restore-cache-pem
        uses: actions/cache/restore@v3
        with:
          path: ${{ steps.setup.outputs.main-path }}\selfcustody.pem
          key: ${{ runner.os }}-pem-v${{ inputs.krux-version }}

      - name: Test main
        if: ${{ inputs.test == 'main' }}
        shell: pwsh
        run: yarn run test main

      - name: Test select-device
        if: ${{ inputs.test == 'select-device' }}
        shell: pwsh
        run: yarn run test select-device

      - name: Test select-version init
        if: ${{ inputs.test == 'select-version' && inputs.sub-test == 'init' }} 
        shell: pwsh
        run: yarn run test select-version/init

      - name: Test select-version release (with download)
        if: ${{ inputs.test == 'select-version' && inputs.sub-test == 'release' && steps.restore-cache-release.outputs.cache-hit != 'true' }}
        shell: pwsh
        run: yarn run test select-version/v${{ inputs.krux-version }}/release

      - name: Test select-version release (not download)
        if: ${{ inputs.test == 'select-version' && inputs.sub-test == 'release' && steps.restore-cache-release.outputs.cache-hit == 'true' }}
        shell: pwsh
        run: yarn run test select-version/v${{ inputs.krux-version }}/release --filter '0[0-9][0-9].download*.spec.ts'
       
      - name: Test select-version sha256 (with download)
        if: ${{ inputs.test == 'select-version' && inputs.sub-test == 'sha256' && steps.restore-cache-sha256.outputs.cache-hit != 'true' }}
        shell: pwsh
        run: yarn run test select-version/v${{ inputs.krux-version }}/sha256

      - name: Test select-version sha256 (not download)
        if: ${{ inputs.test == 'select-version' && inputs.sub-test == 'sha256' && steps.restore-cache-sha256.outputs.cache-hit == 'true' }}
        shell: pwsh
        run: yarn run test select-version/v${{ inputs.krux-version }}/sha256 --filter '0[0-9][0-9].download*.spec.ts'

      - name: Test select-version sig (with download)
        if: ${{ inputs.test == 'select-version' && inputs.sub-test == 'sig' && steps.restore-cache-sig.outputs.cache-hit != 'true' }}
        shell: pwsh
        run: yarn run test select-version/v${{ inputs.krux-version }}/sig

      - name: Test select-version sig (not download)
        if: ${{ inputs.test == 'select-version' && inputs.sub-test == 'sig' && steps.restore-cache-sig.outputs.cache-hit == 'true' }}
        shell: pwsh
        run: yarn run test select-version/v${{ inputs.krux-version }}/sig --filter '0[0-9][0-9].download*.spec.ts'
          
      - name: Test select-version pem (with download)
        if: ${{ inputs.test == 'select-version' && inputs.sub-test == 'pem' && steps.restore-cache-pem.outputs.cache-hit != 'true' }}
        shell: pwsh
        run: yarn run test select-version/v${{ inputs.krux-version }}/pem

      - name: Test select-version pem (not download)
        if: ${{ inputs.test == 'select-version' && inputs.sub-test == 'pem' && steps.restore-cache-pem.outputs.cache-hit == 'true' }}
        shell: pwsh
        run: yarn run test select-version/v${{ inputs.krux-version }}/sig --filter '0[0-9][0-9].download*.spec.ts'

      - name: Test select-version verify
        if: >-
          ${{
            inputs.test == 'select-version' &&
            inputs.sub-test == 'verify' &&
            steps.restore-cache-release.outputs.cache-hit == 'true' &&
            steps.restore-cache-sha256.outputs.cache-hit == 'true' &&
            steps.restore-cache-sig.outputs.cache-hit == 'true' &&
            steps.restore-cache-pem.outputs.cache-hit == 'true'
          }}
        shell: pwsh
        run: yarn run test select-version/v${{ inputs.krux-version }}/verify

      - name: Test flash initialization
        if: >-
          ${{
            inputs.test == 'flash' &&
            inputs.sub-test == 'init' &&
            steps.restore-cache-release.outputs.cache-hit == 'true' &&
            steps.restore-cache-sha256.outputs.cache-hit == 'true' &&
            steps.restore-cache-sig.outputs.cache-hit == 'true' &&
            steps.restore-cache-pem.outputs.cache-hit == 'true'
          }}
        shell: pwsh
        run: yarn run test flash/init

      - name: Test flash version
        if: >-
          ${{
            inputs.test == 'flash' &&
            inputs.sub-test == 'version' &&
            steps.restore-cache-release.outputs.cache-hit == 'true' &&
            steps.restore-cache-sha256.outputs.cache-hit == 'true' &&
            steps.restore-cache-sig.outputs.cache-hit == 'true' &&
            steps.restore-cache-pem.outputs.cache-hit == 'true'
          }}
        shell: pwsh
        run: yarn run test flash/v${{ inputs.krux-version }}

      - name: Save cache release resource
        if: >-
          ${{
            (
              inputs.test == 'select-version' ||
              inputs.test == 'flash' 
            ) &&
            inputs.sub-test != 'init' &&
            steps.restore-cache-release.outputs.cache-hit != 'true'
          }}
        uses: actions/cache/save@v3
        with:
          path: ${{ steps.setup.outputs.release-path }}\krux-v${{ inputs.krux-version }}.zip
          key: ${{ runner.os }}-release-v${{ inputs.krux-version }}

      - name: Save cache sha256 resource
        if: >-
          ${{
            (
              inputs.test == 'select-version' ||
              inputs.test == 'flash' 
            ) &&
            inputs.sub-test != 'init' &&
            steps.restore-cache-sha256.outputs.cache-hit != 'true'
          }}
        uses: actions/cache/save@v3
        with:
          path: ${{ steps.setup.outputs.release-path }}\krux-v${{ inputs.krux-version }}.zip.${{ inputs.digest-ext }}
          key: ${{ runner.os }}-sha256-v${{ inputs.krux-version }}

      - name: Save cache signature resource
        if: >-
          ${{
            (
              inputs.test == 'select-version' ||
              inputs.test == 'flash' 
            ) &&
            inputs.sub-test != 'init' &&
            steps.restore-cache-sig.outputs.cache-hit != 'true'
          }}
        uses: actions/cache/save@v3
        with:
          path: ${{ steps.setup.outputs.release-path }}\krux-v${{ inputs.krux-version }}.zip.sig
          key: ${{ runner.os }}-sig-v${{ inputs.krux-version }}

      - name: Save cache public key certificate resource
        if: >-
          ${{
            (
              inputs.test == 'select-version' ||
              inputs.test == 'flash' 
            ) &&
            inputs.sub-test != 'init' &&
            steps.restore-cache-pem.outputs.cache-hit != 'true'
          }}
        uses: actions/cache/save@v3
        with:
          path: ${{ steps.setup.outputs.main-path }}\selfcustody.pem
          key: ${{ runner.os }}-pem-v${{ inputs.krux-version }}
