name: Build electron application on windows

on:
  workflow_call:
    secrets:
      token:
        required: true
    
    inputs:
      build:
        description: 'The build type (nsis, nsis-web, portable, appx, msi, squirrel)'
        type: string
        required: true
      
      digest-ext:
        description: 'The extension for sha256 digest file'
        type: string
        default: sha256.txt

jobs:
  build-win:
    runs-on: windows-latest

    steps:
      - name: Checkout Git repository
        uses: actions/checkout@v3

      - name: Setup cached node.js with dependencies (Windows)
        uses: qlrd/setup-cached-node@main
        with:
          node-version: '18.15.0'
          cache-path: ${{ github.workspace }}/node_modules
          cache-key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock', format('{0}/node_modules/png-to-ico/bin', github.workspace)) }} 
     
      - name: Variables helpers (Windows) 
        id: setup
        shell: pwsh
        run: |
          $loc = Get-Location
          $firmware_version = "v22.08.2"
          $zipname = "krux-$firmware_version.zip"
          $signame = "krux-$firmware_version.zip.sig"
          $pemname = "selfcustody.pem"
          $extraResources = "$loc\extraResources"
          $opensslVersion = "3.1.0"
          $release_url = "https://github.com/selfcustody/krux/releases/download"
          $raw_url = "https://raw.githubusercontent.com/selfcustody/krux/main"
          $app_version = node -e "console.log(require('./package.json').version)"
          $app_name="KruxInstaller Setup $app_version"
          echo "app-name=$app_name" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          echo "zip-file=$loc\$zipname" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append  
          echo "sig-file=$loc\$signame" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append 
          echo "pem-file=$loc\$pemname" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append 
          echo "release-zip=$release_url/$firmware_version/$zipname" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append 
          echo "release-sig=$release_url/$firmware_version/$signame" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          echo "release-pem=$raw_url/$pemname" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          echo "extra-resources=$extraResources" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          echo "openssl-version=$opensslVersion" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          echo "openssl-build-dir=$loc\openssl" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          echo "openssl-prefix=$extraResources\OpenSSL" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append  
          echo "openssl-dir=$extraResources\OpenSSL\CommonFiles" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          echo "openssl-bin=$prefix\bin\openssl.exe" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Restore cache build
        id: restore-cache-build
        uses: actions/cache/restore@v3 
        with:
          path: |
            dist_electron/${{ steps.setup.outputs.app-name }}.exe 
            dist_electron/${{ steps.setup.outputs.app-name }}.exe.${{ inputs.digest-ext }}
            dist_electron/win-unpacked
          key: ${{ runner.os }}-build-${{ hashFiles('src/**', 'public/**', 'vue.config.js') }}

      - name: Restore extraResources (openssl for Windows)
        id: restore-cache-extra 
        uses: actions/cache/restore@v3 
        with:
          path: ${{ steps.setup.outputs.extra-resources }}
          key: ${{ runner.os }}-extra-openssl-${{ steps.setup.outputs.openssl-version }}

      - name: Create extraResources directory if not exists (openssl for Windows)
        if: ${{ steps.restore-cache-extra.outputs.cache-hit != 'true' }}
        shell: pwsh
        run: |
          $exists=Test-Path -Path ${{ steps.setup.outputs.extra-resources }}
          if(!$exists) { New-Item -ItemType directory -Path ${{ steps.setup.outputs.extra-resources }} }

      - name: Configure, build, test and install (openssl for Windows)  
        if: ${{ steps.restore-cache-extra.outputs.cache-hit != 'true' }}
        uses: qlrd/compile-openssl-windows-action@v0.0.2
        with:
          build-type: 'plain'
          version: openssl-${{ steps.setup.outputs.openssl-version }}
          prefix: ${{ steps.setup.outputs.openssl-prefix }}
          openssldir: ${{ steps.setup.outputs.openssl-dir }}

      - name: Download krux's release firmware zip file for pre-test
        if: ${{ steps.restore-cache-extra.outputs.cache-hit != 'true' }}
        shell: cmd
        run: curl.exe -L ${{ steps.setup.outputs.release-zip }} -o ${{ steps.setup.outputs.zip-file }}
    
      - name: Download krux's release firmware signature file for pre-test
        if: ${{ steps.restore-cache-extra.outputs.cache-hit != 'true' }}
        shell: cmd
        run: curl.exe -L ${{ steps.setup.outputs.release-sig }} -o ${{ steps.setup.outputs.sig-file }}

      - name: Download selfcustody's public key certificate for pre-test
        if: ${{ steps.restore-cache-extra.outputs.cache-hit != 'true' }}
        shell: cmd
        run: |
          curl.exe -L -H "Accept-Charset: utf-8" ${{ steps.setup.outputs.release-pem }} -o ${{ steps.setup.outputs.pem-file }}

      - name: Pre-test built-in openssl  (Windows)
        if: ${{ steps.restore-cache-extra.outputs.cache-hit != 'true' }}
        shell: cmd 
        run: >
          ${{ steps.setup.outputs.openssl-prefix }}${{ steps.setup.outputs.openssl-bin }} sha256 <${{ steps.setup.outputs.zip-file }} -binary | 
          ${{ steps.setup.outputs.openssl-prefix }}${{ steps.setup.outputs.openssl-bin }} pkeyutl -verify -pubin
          -inkey ${{ steps.setup.outputs.pem-file }}
          -sigfile ${{ steps.setup.outputs.sig-file }}
   
      - name: Save cached built-in openssl (Windows)
        if: ${{ steps.restore-cache-extra.outputs.cache-hit != 'true' }}
        uses: actions/cache/save@v3  
        with:
          path: ${{ steps.setup.outputs.extra-resources }}
          key: ${{ runner.os }}-extra-openssl-${{ steps.setup.outputs.openssl-version }}

      - name: Build electron app (Windows)
        if: ${{ steps.restore-cache-build.outputs.cache-hit != 'true' }}
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.token }}
        run: yarn run build ${{ inputs.build }}

      - name: Hash electron app (Windows)
        if: ${{ steps.restore-cache-build.outputs.cache-hig != 'true' }}
        uses: qlrd/sha256sum-action@v2
        with:
          working-directory: ./dist_electron
          file: ${{ steps.setup.outputs.app-name }}.exe
          ext: ${{ inputs.digest-ext }}

      - name: List dist_electron files (Windows)
        shell: pwsh
        run: ls dist_electron

      - name: List dist_electron\win-unpacked files
        shell: pwsh
        run: ls dist_electron\win-unpacked

      - name: Save cache build (Windows)
        if: ${{ steps.restore-cache-build.outputs.cache-hit != 'true' }}
        uses: actions/cache/save@v3  
        with:
          path: |
            dist_electron/${{ steps.setup.outputs.app-name }}.exe 
            dist_electron/${{ steps.setup.outputs.app-name }}.exe.${{ inputs.digest-ext }}
            dist_electron/win-unpacked
          key: ${{ runner.os }}-build-${{ hashFiles('src/**', 'public/**', 'vue.config.js') }}
