name: Tests

on:
  push:
    branches:
      - kivy
      
  pull_request:

jobs:
  
  black:

    runs-on: ubuntu-latest
    steps:
      
      - uses: actions/checkout@v4

      - name: Install poetry
        run: pipx install poetry
        
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'poetry'
          cache-dependency-path: './poetry.lock'
          architecture: x64
      
      - name: Install poetry dependencies
        run: poetry install

      - name: Check format/
        run: |
          poetry run poe format-src --check --verbose
          poetry run poe format-tests --check --verbose
          poetry run poe format-e2e --check --verbose
          poetry run poe format-installer --check --verbose
          
  pylint:

    needs: black
    
    runs-on: ubuntu-latest
    
    steps:
      
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - name: Install poetry
        run: pipx install poetry

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'poetry'
          cache-dependency-path: './poetry.lock'
          architecture: x64

      - name: Install poetry dependencies
        run: poetry install
        
      - name: Lint src/
        run: poetry run poe lint

  # from xPsycHoWasPx in discord chat:
  # "running macOS in none gpu accelerated mode, and that means no OpenGL,
  # no OpenGL no kivy windowâ€¦. if u need to use vm, you also need a dedicated
  # seperate supported GPU passed through to the osx VM .."
  # 
  # TODO: find how to install properly libs for M1/M2 Macs
  # they raise exceptions that numpy and others libs
  # arent compiled for arm64 (macos-14 and macos-xlarge-*)
  
  pytest:

    needs: pylint

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x64
            
          - os: windows-latest
            arch: x64
            
          - os: macos-12
            arch: x64
            
          - os: macos-13
            arch: x64
            
          - os: macos-14
            arch: arm64
        
    runs-on: ${{ matrix.os }}
    
    steps:
      
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install poetry
        run: pipx install poetry

      - uses: actions/setup-python@v5
        if: ${{ matrix.arch != 'arm64' }}
        with:
          python-version: '3.12'
          cache: 'poetry'
          cache-dependency-path: './poetry.lock'
          architecture: ${{ matrix.arch }}

      - uses: actions/setup-python@v5
        if: ${{ matrix.arch == 'arm64' }}
        with:
          python-version: '3.12'
                 
      - name: Install project and its dependencies
        run: poetry install
        
      - name: Run tests (Linux)
        if: ${{ runner.os == 'Linux' }}
        uses: coactions/setup-xvfb@6b00cf1889f4e1d5a48635647013c0508128ee1a
        with:
          run: |
            poetry add pytest-xvfb
            poetry run poe test

      - name: Run tests (MacOS)
        if: ${{ runner.os == 'macOS' }}
        run: poetry run poe test-unit
        
      - name: Run tests (Windows)
        if: ${{ runner.os == 'Windows' }}
        env:
          KIVY_GL_BACKEND: 'angle_sdl2'
        run: poetry run poe test

      #- name: Run tests (MacOS)
      #  if: ${{ runner.os == 'macOS' }}
      #  env:
      #    KIVY_GL_DEBUG: 1
      #    KIVY_GL_BACKEND: 'gl'
      #  run: poetry run poe test
  
  coverage:

    needs: pytest

    runs-on: ubuntu-latest
    
    steps:
     
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - name: Install poetry
        run: pipx install poetry

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'poetry'
          cache-dependency-path: './poetry.lock'
          architecture: x64

      - name: Install project and its dependencies
        run: poetry install

      - name: Build coverage file
        uses: coactions/setup-xvfb@6b00cf1889f4e1d5a48635647013c0508128ee1a
        with:
          run: |
            poetry add pytest-xvfb
            poetry run poe coverage

      
      - name: Upload coverage reports to Codecov with GitHub Action
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
  
  build:

    needs: coverage
    
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x64
            
          - os: windows-latest
            arch: x64
            
          - os: macos-12
            arch: x64
            
          - os: macos-13
            arch: x64
            
          - os: macos-14
            arch: arm64
     
    runs-on: ${{ matrix.os }}
    
    steps:
      
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - name: Install poetry
        run: pipx install poetry

      - uses: actions/setup-python@v5
        if: ${{ matrix.arch != 'arm64' }}
        with:
          python-version: '3.12'
          cache: 'poetry'
          cache-dependency-path: './poetry.lock'
          architecture: ${{ matrix.arch }}

      - uses: actions/setup-python@v5
        if: ${{ matrix.arch == 'arm64' }}
        with:
          python-version: '3.12'

      - name: Setup (Linux)
        if: ${{ runner.os == 'Linux' }}
        id: setup-linux
        run: |
          NAME=`poetry run python -c 'from src.utils.constants import get_name; print(get_name())'`
          VERSION=`poetry run python -c 'from src.utils.constants import get_version; print(get_version())'`
          DESCRIPTION=`poetry run python -c 'from src.utils.constants import get_description; print(get_description)'`
          echo "app-name=$NAME" >> $GITHUB_OUTPUT
          echo "app-version=$VERSION" >> $GITHUB_OUTPUT
          echo "app-description='$DESCRIPTION'" >> $GITHUB_OUTPUT
          echo "app-package=$NAME-$VERSION.deb"

      - name: Setup (MacOS)
        if: ${{ runner.os == 'macOS' }}
        id: setup-macos
        run: |
          brew install create-dmg
          brew reinstall openssl@3
          brew unlink openssl@3 && brew link openssl@3
          OPENSSL_MAJOR_VERSION=`$(which openssl) -version | awk '{ print $2}' | cut -d . -f1` 
          OPENSSL_FULL_VERSION=`$(which openssl) -version | awk ' { print $2}'`
          OPENSSL_PATH="/opt/homebrew/Cellar/openssl@$OPENSSL_MAJOR_VESION/${OPENSSL_FULL_VERSION}"
          NAME=`poetry run python -c 'from src.utils.constants import get_name; print(get_name())'`
          VERSION=`poetry run python -c 'from src.utils.constants import get_version; print(get_version())'`
          DESCRIPTION=`poetry run python -c 'from src.utils.constants import get_description; print(get_description)'`
          echo "dyld-path=${OPENSSL_PATH}/lib:${DYLD_LIBRARY_PATH}" >> $GITHUB_OUTPUT
          echo "app-name=$NAME" >> $GITHUB_OUTPUT
          echo "app-version=$VERSION" >> $GITHUB_OUTPUT
          echo "app-description='$DESCRIPTION'" >> $GITHUB_OUTPUT
          echo "app-package=$NAME-$VERSION.dmg"
          
      - name: Setup (Windows)
        if: ${{ runner.os == 'Windows' }}
        id: setup-win
        shell: pwsh
        run: |
          $name = poetry run python -c 'from src.utils.constants import get_name; print(get_name())'
          $version = poetry run python -c 'from src.utils.constants import get_version; print(get_version())'
          $description = poetry run python -c 'from src.utils.constants import get_description; print(get_description)'
          echo "app-name=$name" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          echo "app-version=$version" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          echo "app-description='$description'" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          
      - name: Install project and its dependencies
        run: poetry install

      - name: Patch pyinstaller_hook for kivy in Unix
        if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
        run: poetry run poe patch-nix

      - name: Patch pyinstaller_hook for kivy in Windows
        if: ${{ runner.os == 'Windows' }}
        run: poetry run poe patch-win
        
      - name: Build dist (Linux)
        if: ${{ runner.os == 'Linux' }}
        uses: coactions/setup-xvfb@90473c3ebc69533a1a6e0505c36511b69c8c3135
        with:
          run: |
            poetry add pytest-xvfb
            poetry run poe build

      - name: Build dist (MacOS)
        if: ${{ runner.os == 'macOS' }}
        env:
          DYLD_LIBRARY_PATH: ${{ steps.setup-macos.outputs.dyld-path }}
        run: poetry run poe build
        
      - name: Build dist (Windows)
        if: ${{ runner.os == 'Windows' }}
        env:
          KIVY_GL_BACKEND: 'angle_sdl2'
        run: poetry run poe build

      - name: Build release (Linux)
        if: ${{ runner.os == 'Linux' }}
        run: |
          mkdir -p ./release
          sh .ci/create-deb.sh --app-name ${{ steps.setup-linux.outputs.app-name }} --output-dir ./release --version ${{ steps.setup-linux.outputs.app-version }} --architecture x64 --maintainer-name qlrd --maintainer-email qlrddev@gmail.com --description "${{ steps.setup-linux.outputs.app-description }}" --binary ./dist/krux-installer
        
      - name: Build release dmg (MacOS)
        if: ${{ runner.os == 'macOS' }}
        env:
          DYLD_LIBRARY_PATH: ${{ steps.setup-macos.outputs.dyld-path }}
        run: |
          mkdir -p ./release
          create-dmg --volname "${{ steps.setup-macos.outputs.app-name }}" --volicon ./assets/icon.icns --window-pos 200 120 --window-size 800 400 --icon-size 100 --icon krux-installer.app 200 190 --app-drop-link 600 185 ./release/${{ steps.setup-macos.outputs.app-package }} ./dist/krux-installer.app
          
      - name: Hash (Linux)
        if: ${{ runner.os == 'Linux' }}
        uses: qlrd/sha256sum-action@v2
        id: hash-linux
        with:
          working-directory: ./release
          file: ${{ steps.setup-linux.outputs.app-package }}
          ext: 'sha256.txt'
          
      - name: Hash (MacOS)
        if: ${{ runner.os == 'macOS' }}
        uses: qlrd/sha256sum-action@v2
        id: hash-macos
        with:
          working-directory: ./release
          file: ${{ steps.setup-project.outputs.app-package }}
          ext: 'sha256.txt'

      - name: Hash (Windows)
        if: ${{ runner.os == 'Windows' }}
        uses: qlrd/sha256sum-action@v2
        id: hash-win
        with:
          working-directory: .\dist
          file: krux-installer.exe
          ext: 'sha256.txt'

      - name: Upload artifacts (Linux)
        if: ${{ runner.os == 'Linux' }}
        uses: actions/upload-artifact@v4         
        with:
          name: ${{ matrix.os }}-${{ steps.setup-project.outputs.app-pacakge }}
          path: |
            release/${{ steps.setup-project.outputs.app-package }}
            ${{ steps.hash-linux.outputs.hash-file }}
            
      - name: Upload artifacts (MacOS)
        if: ${{ runner.os == 'macOS' }}
        uses: actions/upload-artifact@v4         
        with:
          name: ${{ matrix.os }}-${{ steps.setup-project.outputs.app-package }}
          path: |
            release/${{ steps.setup-project.outputs.app-pacakge }}
            ${{ steps.hash-macos.outputs.hash-file }}
      
      - name: Upload artifacts (Windows)
        if: ${{ runner.os == 'Windows' }}
        uses: actions/upload-artifact@v4         
        with:
          name: ${{ matrix.os }}-${{ steps.setup-project.outputs.app-name }}-${{ steps.setup-project.outputs.app-version }}
          path: |
            dist\krux-installer.exe
            ${{ steps.hash-win.outputs.hash-file }}
